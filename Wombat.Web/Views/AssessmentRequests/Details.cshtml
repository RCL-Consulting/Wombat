@model AssessmentRequestVM
@using Microsoft.AspNetCore.Identity
@using Wombat.Data
@inject UserManager<WombatUser> UserManager

@{
    ViewData["Title"] = "Details";
}

@{
    var myUserId = UserManager.GetUserId(User);
    bool isParty = (Model.TraineeId == myUserId) || (Model.AssessorId == myUserId) || User.IsInRole(Role.Administrator.ToStringValue());
    bool isPending = Model.BaseStatus == AssessmentRequestStatus.Requested || Model.BaseStatus == AssessmentRequestStatus.Accepted;
    bool canCancel = isPending && isParty;
    bool canReschedule = isParty && (isPending || Model.BaseStatus == AssessmentRequestStatus.Declined);

    // Use display/derived status for the big badge
    var displayStatus = Model.Status;          // e.g., Accepted / NotConducted / Expired …
    var baseStatus = Model.BaseStatus;      // e.g., Requested / Accepted / Declined / Cancelled / Completed

    // Map status to a bootstrap-ish badge class and icon
    Func<AssessmentRequestStatus, (string css, string icon)> badge = s => s switch
    {
        AssessmentRequestStatus.Accepted => ("badge bg-success", "fas fa-check"),
        AssessmentRequestStatus.Requested => ("badge bg-primary", "fas fa-hourglass-half"),
        AssessmentRequestStatus.Declined => ("badge bg-danger", "fas fa-times"),
        AssessmentRequestStatus.Cancelled => ("badge bg-secondary", "fas fa-ban"),
        AssessmentRequestStatus.Completed => ("badge bg-info", "fas fa-clipboard-check"),
        AssessmentRequestStatus.NotConducted => ("badge bg-warning text-dark", "fas fa-exclamation-triangle"),
        AssessmentRequestStatus.Expired => ("badge bg-dark", "fas fa-clock"),
        _ => ("badge bg-light text-dark", "fas fa-info-circle")
    };

    var (css, icon) = badge(displayStatus);

    // If the derived display differs from the base lifecycle, show a subtle sub-label
    var showBaseHint = baseStatus != displayStatus
        && (displayStatus == AssessmentRequestStatus.NotConducted || displayStatus == AssessmentRequestStatus.Expired);

    bool isCompleted = Model.BaseStatus == AssessmentRequestStatus.Completed && Model.LoggedAssessment != null;
}

<div class="container mt-4">
    <div class="card card-accent-details shadow-sm">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-tasks me-2"></i>Request - Details</h5>

            <span class="@css" title="Current status">
                <i class="@icon me-1"></i>@Model.StatusDisplayName
            </span>

            @if (showBaseHint)
            {
                <span class="badge bg-light text-muted" title="Base lifecycle status">
                    base: @baseStatus.GetDisplayName()
                </span>
            }
        </div>

        <div class="card-body">
            <dl class="row">
                <dt class = "col-sm-2">
                    @Html.DisplayNameFor(model => model.Trainee)
                </dt>
                <dd class = "col-sm-10">
                    @Model.Trainee.Name @Model.Trainee.Surname (@Model.Trainee.Email)
                </dd>
                <dt class="col-sm-2">
                    Speciality
                </dt>
                <dd class="col-sm-10">
                    @Model.EPA.SubSpeciality.Speciality.Name
                </dd>
                <dt class="col-sm-2">
                    Subspeciality
                </dt>
                <dd class="col-sm-10">
                    @Model.EPA.SubSpeciality.Name
                </dd>
                <dt class="col-sm-2">
                    EPA
                </dt>
                <dd class="col-sm-10">
                    @Model.EPA.Name - @Model.EPA.Description
                </dd>
                <dt class="col-sm-2">@Html.DisplayNameFor(m => m.AssessmentDate)</dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(m => m.AssessmentDate)
                    @if (Model.Status == AssessmentRequestStatus.NotConducted)
                    {
                        <span class="text-warning ms-2"><i class="fas fa-exclamation-triangle me-1"></i>date passed, not logged</span>
                    }
                    else if (Model.Status == AssessmentRequestStatus.Expired)
                    {
                        <span class="text-muted ms-2"><i class="fas fa-clock me-1"></i>date passed, not accepted</span>
                    }
                </dd>
                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.Events)
                </dt>
                <dd class="col-sm-10">
                    <div class="card shadow-sm mt-4" id="events">
                        <div class="card-header bg-light text-muted">
                            <i class="fas fa-comments me-2"></i>Event History
                        </div>

                        <div class="card-body">
                            @if (Model.Events?.Any() == true)
                            {
                                @foreach (var evt in Model.Events)
                                {
                                    <div class="mb-3">
                                        <div>
                                            <strong>@evt.Actor?.DisplayName</strong>
                                            <span class="text-muted">(@evt.Type) on @evt.Timestamp.ToLocalTime():</span>
                                        </div>
                                        @if (!string.IsNullOrWhiteSpace(evt.Message))
                                        {
                                            <div class="ms-3">@evt.Message</div>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-muted">No events yet.</div>
                            }
                        </div>

                        @if (Model.TraineeId == UserManager.GetUserId(User) || Model.AssessorId == UserManager.GetUserId(User))
                        {
                            <div class="card-footer bg-light">
                                <form asp-action="AddComment" method="post" class="d-flex gap-2 align-items-start">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" asp-for="Id" />
                                    <div class="flex-grow-1">
                                        <label for="ActionComment" class="visually-hidden">Add a comment</label>
                                        <textarea asp-for="ActionComment"
                                                  id="ActionComment"
                                                  class="form-control"
                                                  rows="2"
                                                  placeholder="Write a comment…"></textarea>
                                    </div>
                                    <button type="submit"
                                            class="btn btn-icon btn-edit"
                                            id="sendCommentBtn"
                                            title="Send comment"
                                            aria-label="Send comment"
                                            disabled>
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                </form>
                            </div>
                        }
                    </div>
                </dd>
            </dl>

        </div>
        <div class="card-footer d-flex justify-content-between">
            <a asp-action="Index" class="btn btn-icon btn-back" title="Back to List">
                <i class="fa-solid fa-list"></i>
            </a>
            <div>
                @if (User.IsInRole(Role.Assessor.ToStringValue()))
                {
                    if (Model.BaseStatus == AssessmentRequestStatus.Requested)
                    {
                        <a class="btn btn-icon btn-create"
                        asp-action="AcceptRequest"
                        asp-route-id="@Model.Id"
                        title="Accept Request">
                            <i class="fas fa-check"></i>
                        </a>
                        <a class="btn btn-icon btn-delete"
                        asp-action="DeclineRequest"
                        asp-route-id="@Model.Id"
                        title="Decline Request">
                            <i class="fas fa-times"></i>
                        </a>
                    }
                    else if (Model.BaseStatus == AssessmentRequestStatus.Accepted)
                    {
                        <a class="btn btn-icon btn-edit btn-sm"
                        asp-action="LogRequestedAssessment"
                        asp-controller="LoggedAssessments"
                        asp-route-id="@Model.Id"
                        title="Log Assessment">
                            <i class="fa-solid fa-clipboard-check"></i>
                        </a>
                    }
                }

                @* Cancel available to trainee OR assessor (or admin) while pending *@
                @if (canCancel)
                {
                    <a class="btn btn-icon btn-delete"
                       asp-action="CancelRequest"
                       asp-route-id="@Model.Id"
                       title="Cancel Request"
                       onclick="return confirm('Cancel this request?');">
                        <i class="fas fa-ban"></i>
                    </a>
                }

                @if (canReschedule)
                {
                    <a class="btn btn-icon btn-edit"
                       asp-action="Reschedule"
                       asp-route-id="@Model.Id"
                       title="Reschedule">
                        <i class="fas fa-calendar-alt"></i>
                    </a>
                }

                @if (isCompleted)
                {
                    <a class="btn btn-icon btn-info"
                       asp-controller="LoggedAssessments"
                       asp-action="Details"
                       asp-route-id="@Model.LoggedAssessment.Id"
                       title="View Logged Assessment">
                        <i class="fas fa-clipboard-list"></i>
                    </a>
                }

                <a class="btn btn-icon btn-create btn-sm"
                   asp-action="ExportCalendarEntry"
                   asp-route-id="@Model.Id"
                   title="Export calendar event">
                    <i class="fas fa-calendar-plus"></i>
                </a>
            </div>
        </div>

    </div>
</div>

@section Scripts {
    <script>
        (function () {
            const ta = document.getElementById('ActionComment');
            const btn = document.getElementById('sendCommentBtn');
            if (!ta || !btn) return;

            const toggle = () => btn.disabled = !ta.value.trim();
            ta.addEventListener('input', toggle);
            toggle();

            ta.addEventListener('keydown', (e) => {
                if ((e.ctrlKey || e.metaKey) && e.key === 'Enter' && !btn.disabled) {
                    e.preventDefault();
                    btn.closest('form').submit();
                }
            });
        })();
    </script>
}