@model AssessmentFormVM

@{
    ViewData["Title"] = "Edit Assessment Form";
}

<div class="container mt-4">
    <div class="card card-accent-edit shadow-sm">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-file-alt me-2"></i>Assessment Form - Edit</h5>
        </div>

        <form asp-action="Edit" id="form">
            <div class="card-body">
                <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                <div class="mb-3">
                    <label asp-for="Name" class="form-label fw-semibold"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <input type="hidden" asp-for="Id" />

                <div class="d-flex justify-content-between align-items-center mt-4 mb-2">
                    <h5 class="mb-0"><i class="fas fa-list-ul me-2"></i>Assessment Questions</h5> 
                </div>
                <hr />

                <div id="collectionContainer" class="sortable-container">                  
                    @Html.EditorFor(model => model.OptionCriteria)
                </div>
            </div>

            <div class="card-footer bg-light">
                <div class="row text-center align-items-center">

                    <!-- Column 1: Back -->
                    <div class="col-md-4 d-flex justify-content-start">
                        <a asp-action="Index" class="btn btn-icon btn-back" title="Back to List">
                            <i class="fa-solid fa-list"></i>
                        </a>
                    </div>

                    <!-- Column 2: Add options -->
                    <div class="col-md-4 d-flex justify-content-center flex-wrap gap-2">
                        <button type="button" class="btn btn-icon btn-create" id="btnAdd" title="Add Empty Criterion">
                            <i class="fas fa-plus"></i>
                        </button>

                        <select id="templateSelect" class="form-select form-select-sm w-auto">
                            <option value="">-- Choose Template --</option>
                            @foreach (var form in ViewBag.Templates as List<SelectListItem>)
                            {
                                <option value="@form.Value">@form.Text</option>
                            }
                        </select>

                        <button type="button" class="btn btn-outline-secondary btn-sm" id="btnInsertTemplate">
                            Insert Template
                        </button>
                    </div>

                    <!-- Column 3: Save -->
                    <div class="col-md-4 d-flex justify-content-end">
                        <button type="submit" class="btn btn-icon btn-edit" title="Save Changes">
                            <i class="fas fa-save"></i>
                        </button>
                    </div>

                </div>
            </div>



        </form>
    </div>
</div>

@section Scripts {

    <script type="text/javascript">
        new Sortable(document.getElementById('collectionContainer'), {
            animation: 150,
            handle: '.drag-handle', // see below
            onEnd: function () {
                updateRanks();
            }
        });

        $('#btnInsertTemplate').on('click', function () {
            const selectedId = $('#templateSelect').val();
            if (!selectedId) return;

            const formElement = document.getElementById('form');
            const formData = new FormData(formElement);
            formData.append("templateFormId", selectedId);

            $.ajax({
                type: 'POST',
                url: '/AssessmentForms/CloneCriteria',
                data: formData,
                processData: false,
                contentType: false,
                success: function (partialHtml) {
                    $('#collectionContainer').html(partialHtml);
                    updateRanks(); // optional
                    const last = $('#collectionContainer .inputFormRow').last();
                    last[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
                    animateHighlight(last);
                },
                error: function (xhr) {
                    console.error('Insert failed:', xhr.responseText || xhr.statusText);
                }
            });
        });

        function flipSwap($movingCard, $targetCard, insertFn) {
            const firstRect = $movingCard[0].getBoundingClientRect();

            // DOM swap
            insertFn();

            const lastRect = $movingCard[0].getBoundingClientRect();

            const deltaY = firstRect.top - lastRect.top;

            // Apply transform to "teleport" back visually
            $movingCard.css({
                transform: `translateY(${deltaY}px)`,
                transition: 'none'
            });

            // Force reflow
            void $movingCard[0].offsetWidth;

            // Then animate to zero offset
            $movingCard.css({
                transform: 'translateY(0)',
                transition: 'transform 300ms ease'
            });

            // Optional: trigger highlight after animation
            setTimeout(() => {
                animateHighlight($movingCard);
            }, 300);
        }

        function updateRanks() {
            $('#collectionContainer .inputFormRow').each(function (index) {
                const newRank = index + 1;
                $(this).find('input[name$=".Rank"]').val(newRank); // update hidden input
                $(this).find('.criterion-label').text('Criterion ' + newRank); // update visible heading
            });
        }

        function animateHighlight($card) {
            const highlightClass = 'move-highlight';

            // Add the highlight
            $card.addClass(highlightClass);

            // Force reflow for the transition
            void $card[0].offsetWidth;

            // Scroll into view (centered if possible)
            $card[0].scrollIntoView({
                behavior: 'smooth',
                block: 'center'
            });

            // Remove highlight after a delay
            setTimeout(() => {
                $card.removeClass(highlightClass);
            }, 600);
        }

        $(document).on('click', '.btn-move-up', function () {
            const $row = $(this).closest('.inputFormRow');
            const $prev = $row.prev('.inputFormRow');
            if ($prev.length) {
                flipSwap($row, $prev, () => {
                    $row.insertBefore($prev);
                    updateRanks();
                });
            }
        });

        $(document).on('click', '.btn-move-down', function () {
            const $row = $(this).closest('.inputFormRow');
            const $next = $row.next('.inputFormRow');
            if ($next.length) {
                flipSwap($row, $next, () => {
                    $row.insertAfter($next);
                    updateRanks();
                });
            }
        });


        $("#btnAdd").on('click', function () {
            $.ajax({
                async: true,
                data: $('#form').serialize(),
                type: "POST",
                url: '/AssessmentForms/AddCriterion',
                success: function (partialView) {
                    $('#collectionContainer').html(partialView);

                    // Scroll to last item (the new card)
                    const $lastCard = $('#collectionContainer .inputFormRow').last();
                    $('html, body').animate({
                        scrollTop: $lastCard.offset().top - 100 // adjust offset if needed
                    }, 600);

                    animateHighlight($lastCard); // optional: highlight it
                }
            });
        });


        $(document).on('click', '#btnDelete', function () {
            var form = $('#form').serialize();
            var parentDiv = $(this).closest('.inputFormRow');
            var DisplayId = parentDiv.find('.display-id').val(); // or

            console.log(DisplayId); // should now print a valid string

            $.ajax({
                async: true,
                data: form + '&displayId=' + DisplayId,
                type: "POST",
                url: '/AssessmentForms/DeleteCriterion',
                success: function (partialView) {
                    $('#collectionContainer').html(partialView);
                }
            });
        });

    </script>
}
