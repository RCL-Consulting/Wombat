@model Wombat.Common.Models.InviteUserVM

@{
    ViewData["Title"] = "Invite User";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm rounded-4 overflow-hidden">

                <!-- Banner -->
                <div class="bg-primary text-white text-center py-3">
                    <h4 class="mb-0">@ViewData["Title"]</h4>
                </div>

                <div class="card-body p-4">

                    <form asp-action="Invite" method="post">
                        <div class="form-floating mb-3">
                            <input asp-for="Email" class="form-control" autocomplete="email" aria-required="true" />
                            <label asp-for="Email">Email</label>
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Roles</label>
                            <select asp-for="Roles" asp-items="Model.AvailableRoles" class="form-select" multiple id="RolesSelect"></select>
                            <span asp-validation-for="Roles" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Institution</label>
                            <select asp-for="InstitutionId" asp-items="Model.Institutions" class="form-select"></select>
                            <span asp-validation-for="InstitutionId" class="text-danger"></span>
                        </div>

                        <div id="departmentGroup" class="mb-3 d-none">
                            <label class="form-label">Speciality</label>
                            <select asp-for="SpecialityId" asp-items="Model.Specialities" class="form-select" id="SpecialityId"></select>
                            <span asp-validation-for="SpecialityId" class="text-danger"></span>
                        </div>

                        <div id="subSpecialityGroup" class="mb-3 d-none">
                            <label class="form-label">Subspeciality</label>
                            <select id="SubSpecialityId" name="SubSpecialityId" class="form-select"></select>
                            <span asp-validation-for="SubSpecialityId" class="text-danger"></span>
                        </div>

                        <div class="form-floating mb-3">
                            <input asp-for="ExpiryDate" type="date" class="form-control" placeholder="Expiry Date" />
                            <label asp-for="ExpiryDate">Expiry Date</label>
                            <span asp-validation-for="ExpiryDate" class="text-danger"></span>
                        </div>

                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-paper-plane me-2"></i>Send Invitation
                        </button>
                    </form>

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const allSubSpecialities = @Html.Raw(Json.Serialize(Model.AllSubSpecialities));
        const rolesDropdown = document.getElementById("RolesSelect");
        const departmentGroup = document.getElementById("departmentGroup");
        const subSpecialityGroup = document.getElementById("subSpecialityGroup");
        const specialityDropdown = document.getElementById("SpecialityId");
        const subSpecialityDropdown = document.getElementById("SubSpecialityId");

        const departmentRoles = ["DepartmentAdmin", "Assessor", "Coordinator", "CommitteeMember", "Trainee"];
        const subSpecialityRoles = ["Assessor", "Coordinator", "CommitteeMember", "Trainee"];

        function getSelectedRoles() {
            return Array.from(rolesDropdown.selectedOptions).map(o => o.value);
        }

        function updateVisibility() {
            const selectedRoles = getSelectedRoles();
            const showDepartment = selectedRoles.some(r => departmentRoles.includes(r));
            const showSub = selectedRoles.some(r => subSpecialityRoles.includes(r));

            departmentGroup.classList.toggle("d-none", !showDepartment);
            subSpecialityGroup.classList.toggle("d-none", !showSub);
        }

        function populateSubSpecialities(specialityId) {
            subSpecialityDropdown.innerHTML = "";

            const defaultOption = document.createElement("option");
            defaultOption.value = "";
            defaultOption.textContent = "-- Select a SubSpeciality --";
            subSpecialityDropdown.appendChild(defaultOption);

            const filtered = allSubSpecialities.filter(s => s.specialityId === parseInt(specialityId));
            filtered.forEach(sub => {
                const option = document.createElement("option");
                option.value = sub.id;
                option.textContent = sub.name;
                subSpecialityDropdown.appendChild(option);
            });
        }

        rolesDropdown.addEventListener("change", updateVisibility);
        specialityDropdown.addEventListener("change", function () {
            populateSubSpecialities(this.value);
        });

        // Initial setup
        updateVisibility();
        if (specialityDropdown.value) {
            populateSubSpecialities(specialityDropdown.value);
        }
    </script>
}
