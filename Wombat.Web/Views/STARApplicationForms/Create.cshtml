@model STARApplicationFormVM

@{
    ViewData["Title"] = "Create STAR Application Form";
}

<div class="container mt-4">
    <div class="card card-accent-create shadow-sm">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-layer-group me-2"></i>STAR Application Form - Create</h5>
        </div>

        <form asp-action="Create" id="form" method="post">
            <div class="card-body">

                <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                <div class="mb-3">
                    <label asp-for="Name" class="form-label fw-semibold"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label for="specialitySelect" class="form-label fw-semibold">Speciality</label>
                    <select id="specialitySelect" class="form-select">
                        <option value="">-- Select Speciality --</option>
                        @foreach (var s in ViewBag.Specialities as List<SelectListItem>)
                        {
                            <option value="@s.Value">@s.Text</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="subspecialitySelect" class="form-label fw-semibold">Subspeciality</label>
                    <select id="subspecialitySelect" class="form-select" disabled>
                        <option value="">-- Select Subspeciality --</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label asp-for="EPAId" class="form-label fw-semibold">EPA</label>
                    <select asp-for="EPAId" id="epaSelect" class="form-select" disabled>
                        <option value="">-- Select EPA --</option>
                    </select>
                    <span asp-validation-for="EPAId" class="text-danger"></span>
                </div>

                <div class="form-check mb-3">
                    <input asp-for="IsPublished" class="form-check-input" />
                    <label asp-for="IsPublished" class="form-check-label"></label>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-4 mb-2">
                    <h5 class="mb-0"><i class="fas fa-list-ul me-2"></i>Assessment Criteria</h5>
                </div>
                <hr />

                <div id="collectionContainer" class="sortable-container">
                    @Html.EditorFor(model => model.STARItems)
                </div>

            </div>

            <div class="card-footer bg-light">
                <div class="row text-center align-items-center">
                    <div class="col-md-4 d-flex justify-content-start">
                        <a asp-action="Index" class="btn btn-icon btn-back" title="Back to List">
                            <i class="fa-solid fa-list"></i>
                        </a>
                    </div>
                    <div class="col-md-4 d-flex justify-content-center flex-wrap gap-2">
                        <button type="button" class="btn btn-icon btn-create" id="btnAdd" title="Add Empty Criterion">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <div class="col-md-4 d-flex justify-content-end">
                        <button type="submit" class="btn btn-icon btn-edit" title="Save Changes">
                            <i class="fas fa-save"></i>
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script id="subspecialityMap" type="application/json">
        @Html.Raw(Json.Serialize(ViewBag.Subspecialities))
    </script>

    <script id="epaMap" type="application/json">
        @Html.Raw(Json.Serialize(ViewBag.EPAs))
    </script>

    <script id="optionSetsData" type="application/json">
        @Html.Raw(Json.Serialize(ViewBag.OptionSets))
    </script>

    <script>
        const optionSets = JSON.parse(document.getElementById("optionSetsData").textContent);

        $(document).on('change', 'select[name$=".OptionSetId"]', function () {
            const selectedId = parseInt($(this).val());
            const $card = $(this).closest('.inputFormRow');
            const displayId = $card.find('.display-id').val();
            const $preview = $(`#optionsPreview_${displayId} .option-preview`);
            const $container = $card.find('.options-preview-container');
            const optionSet = optionSets.find(o => o.id === selectedId);

            if (!optionSet || !Array.isArray(optionSet.options) || optionSet.options.length === 0) {
                $preview.html('<em class="text-muted small">No options available</em>');
                $container.hide();
                return;
            }

            let html = '<ul class="list-unstyled small mb-0">';
            if (optionSet.displayRank) {
                optionSet.options.forEach(opt => {
                    html += `<li><strong>${opt.rank}.</strong> ${opt.description}</li>`;
                });
            } else {
                optionSet.options.forEach(opt => {
                    html += `<li>${opt.description}</li>`;
                });
            }
            html += '</ul>';
            $preview.html(html);
            $container.show();
        });

        $(document).on('click', '.toggle-preview', function (e) {
            e.preventDefault();
            const target = $(this).data('target');
            $(target).collapse('toggle');
        });

        new Sortable(document.getElementById('collectionContainer'), {
            animation: 150,
            handle: '.drag-handle',
            onEnd: function () {
                updateRanks();
            }
        });

        function updateRanks() {
            $('#collectionContainer .inputFormRow').each(function (index) {
                const newRank = index + 1;
                $(this).find('input[name$=".Rank"]').val(newRank);
                $(this).find('.criterion-label').text('Criterion ' + newRank);
            });
        }

        function animateHighlight($card) {
            const highlightClass = 'move-highlight';
            $card.addClass(highlightClass);
            void $card[0].offsetWidth;
            $card[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
            setTimeout(() => {
                $card.removeClass(highlightClass);
            }, 600);
        }

        function flipSwap($movingCard, $targetCard, insertFn) {
            const firstRect = $movingCard[0].getBoundingClientRect();
            insertFn();
            const lastRect = $movingCard[0].getBoundingClientRect();
            const deltaY = firstRect.top - lastRect.top;
            $movingCard.css({
                transform: `translateY(${deltaY}px)`,
                transition: 'none'
            });
            void $movingCard[0].offsetWidth;
            $movingCard.css({
                transform: 'translateY(0)',
                transition: 'transform 300ms ease'
            });
            setTimeout(() => animateHighlight($movingCard), 300);
        }

        $(document).on('click', '.btn-move-up', function () {
            const $row = $(this).closest('.inputFormRow');
            const $prev = $row.prev('.inputFormRow');
            if ($prev.length) {
                flipSwap($row, $prev, () => {
                    $row.insertBefore($prev);
                    updateRanks();
                });
            }
        });

        $(document).on('click', '.btn-move-down', function () {
            const $row = $(this).closest('.inputFormRow');
            const $next = $row.next('.inputFormRow');
            if ($next.length) {
                flipSwap($row, $next, () => {
                    $row.insertAfter($next);
                    updateRanks();
                });
            }
        });

        $('#btnAdd').on('click', function () {
            console.log('Adding new item...');
            $.ajax({
                async: true,
                data: $('#form').serialize(),
                type: 'POST',
                url: '/STARApplicationForms/AddItem',
                success: function (partialView) {
                    $('#collectionContainer').html(partialView);

                    const $lastCard = $('#collectionContainer .inputFormRow').last();
                    $('html, body').animate({
                        scrollTop: $lastCard.offset().top - 100
                    }, 600);
                    animateHighlight($lastCard);
                    $('select[name$=".OptionSetId"]').trigger('change');
                }
            });
        });

        $(document).on('click', '.btnDelete', function () {
            const form = $('#form').serialize();
            const parentDiv = $(this).closest('.inputFormRow');
            const displayId = parentDiv.find('.display-id').val();

            $.ajax({
                async: true,
                data: form + '&displayId=' + displayId,
                type: 'POST',
                url: '/STARApplicationForms/DeleteItem',
                success: function (partialView) {
                    $('#collectionContainer').html(partialView);
                }
            });
        });

        const subspecialityMap = JSON.parse(document.getElementById("subspecialityMap").textContent);
        const epaMap = JSON.parse(document.getElementById("epaMap").textContent);

        $('#specialitySelect').on('change', function () {
            const selectedSpecialityId = $(this).val();
            const subs = subspecialityMap[selectedSpecialityId] || [];
            const $subSelect = $('#subspecialitySelect');
            console.log('Here');
            $subSelect.empty().append('<option value="">-- Select Subspeciality --</option>');
            subs.forEach(s => {
                $subSelect.append(`<option value="${s.value}">${s.text}</option>`);
            });

            $subSelect.prop('disabled', subs.length === 0);
            $('#epaSelect').empty().append('<option value="">-- Select EPA --</option>').prop('disabled', true);
        });

        $('#subspecialitySelect').on('change', function () {
            const selectedSubId = $(this).val();
            const epas = epaMap[selectedSubId] || [];
            const $epaSelect = $('#epaSelect');

            $epaSelect.empty().append('<option value="">-- Select EPA --</option>');
            epas.forEach(e => {
                $epaSelect.append(`<option value="${e.value}">${e.text}</option>`);
            });

            $epaSelect.prop('disabled', epas.length === 0);
        });
    </script>
}
