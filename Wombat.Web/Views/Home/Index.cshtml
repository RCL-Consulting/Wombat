@model DashboardVM
@using Microsoft.AspNetCore.Identity
@inject SignInManager<Wombat.Data.WombatUser> SignInManager
@inject Wombat.Application.Contracts.IUserContextService UserContext
@using Newtonsoft.Json

@if (UserContext.ApprovalStatus == "Approved")
{
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Welcome, @Model.User.Name</h1>
    </div>

    @* Admin Section *@
    @if (UserContext.CanManageAssessmentForms || UserContext.IsGlobalAdmin)
    {
        <partial name="Administrator.cshtml" model="@Model" />
    }

    @* Coordinator Section *@
    @if (UserContext.CanApproveTrainees || UserContext.CanViewPortfolios)
    {
        <partial name="Coordinator.cshtml" model="@Model.Coordinator" />
    }

    @* Assessor Section *@
    @if (UserContext.CanLogAssessment || UserContext.CanHandleAssessmentRequests)
    {
        <partial name="AssessorHome.cshtml" model="@Model" />
    }

    @* Trainee Section *@
    @if (UserContext.CanManageOwnPortfolio || UserContext.CanRequestAssessment)
    {
        ViewData["Title"] = "Trainee Dashboard";

        var labels = new[] { "Requested", "Declined", "Pending", "Completed" };
        var values = new[] {
            Model.NumberOfRequestsMade,
            Model.NumberOfRequestsDeclined,
            Model.NumberOfPendingAssessments,
            Model.NumberOfCompletedAssessments
        };

        ViewData["ChartLabels"] = JsonConvert.SerializeObject(labels);
        ViewData["ChartValues"] = JsonConvert.SerializeObject(values);

        <div class="card-body">
            <partial name="TraineeHome.cshtml" model="@Model" />
        </div>

        @section Scripts {
            @{
                var events = Model.AcceptedRequests
                    .Where(x => x.AssessmentDate.HasValue)
                    .Select(item => new
                    {
                        id = item.Id,
                        start = item.AssessmentDate!.Value.ToString("yyyy-MM-ddTHH:mm:ss"),
                        end = item.AssessmentDate.Value.AddHours(1).ToString("yyyy-MM-ddTHH:mm:ss"),
                        text = $"{item.ShortEPADisplayName}",
                        backColor = "#198754" // green for accepted
                    })
                    .Concat(Model.PendingRequests // replace with your actual pending list
                        .Where(x => x.AssessmentDate.HasValue)
                        .Select(item => new
                        {
                            id = item.Id,
                            start = item.AssessmentDate!.Value.ToString("yyyy-MM-ddTHH:mm:ss"),
                            end = item.AssessmentDate.Value.AddHours(1).ToString("yyyy-MM-ddTHH:mm:ss"),
                            text = $"{item.ShortEPADisplayName}",
                            backColor = "#ffc107" // yellow for pending
                        })
                    );

                var eventsJson = System.Text.Json.JsonSerializer.Serialize(events);
            }

            <script>
                            let calendar;

                function switchView(viewType) {
                    if (calendar) {
                        calendar.dispose(); // Clean up the old instance
                        document.getElementById("calendar_container").innerHTML = "";
                    }

                    switch (viewType) {
                        case "Day":
                            calendar = new DayPilot.Calendar("calendar_container", {viewType: "Day"});
                            break;
                        case "Week":
                            calendar = new DayPilot.Calendar("calendar_container", {viewType: "Week"});
                            break;
                        case "Month":
                        default:
                            calendar = new DayPilot.Month("calendar_container");
                            break;
                    }

                    calendar.events.list = JSON.parse(`@Html.Raw(eventsJson)`);

                    calendar.init();
                }

                document.addEventListener('DOMContentLoaded', function () {
                    switchView("Month"); // Default view
                });
            </script>
            @* <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const ctx = document.getElementById('assessmentChart');
                    if (ctx) {
                        const labels = @Html.Raw(ViewData["ChartLabels"]);
                        const data = @Html.Raw(ViewData["ChartValues"]);

                        new Chart(ctx, {
                            type: 'pie',
                            data: {
                                labels: labels,
                                datasets: [{
                                    data: data,
                                    backgroundColor: ['#dc3545', '#6c757d', '#0d6efd', '#198754'],
                                }]
                            },
                            options: {
                                responsive: true,
                                plugins: {
                                    legend: { position: 'bottom' }
                                }
                            }
                        });
                    }
                });
            </script> *@
        }
    }
    
}
else
{
    <div class="alert alert-warning">
        Your account is currently <strong>@UserContext.ApprovalStatus</strong>. Please contact your coordinator.
    </div>
}
